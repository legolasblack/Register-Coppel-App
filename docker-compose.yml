version: '3.8'

services:
  # seccion de frontend
  front-app:
    container_name: Frontend-app
    build:
      context: ./Front-app/register-ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    restart: unless-stopped
  # Final seccion frontend

  # contenedor postgres para customer-service
  postgres-customer:
    image: postgres:15
    container_name: postgres-customer
    environment:
      POSTGRES_DB: customers_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./customer-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"

  # contenedor postgres para auth-service
  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./auth_service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"

  # contenedor customer-service
  # contenedor customer-service
  customer-service:
    container_name: customer-service
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-customer:5432/customers_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - postgres-customer
    ports:
      - "8082:8080"
    restart: unless-stopped

  # contenedor customer-service
  auth_service:
    container_name: auth_service
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-customer:5434/auth_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - postgres-auth
    ports:
      - "8083:8080"
    restart: unless-stopped

networks:
  default:
    name: register-coppel-network
    driver: bridge
